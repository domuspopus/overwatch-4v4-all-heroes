settings
{
	main
	{
		Description: "All new OW2 heroes.\n- Hammond can grapple air.\n- Ana can self-ult.\n- Junk can ult mid-air.\n- D.Va doesn't get infinite nukes.\n- Ballance changes.\n- Anti-winston-trolling (limited airspace).\n\nVer:1.4. All changes and info at:\ngithub.com/domuspopus/overwatch-4v4-all-heroes"
		Mode Name: "4v4 All Heroes (J-edit)"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
		Swap Teams After Match: No
		Team Balancing: After A Game
	}

	modes
	{
		Elimination
		{
			enabled maps
			{
				Workshop Island Night 0
			}
		}

		General
		{
			Allow Hero Switching: Off
			Capture Objective Tiebreaker: Off
			Game Mode Start: Immediately
			Respawn As Random Hero: On
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 25%
			Spawn With Ultimate Ready: On
			Ultimate Generation: 200%
			Ultimate Generation - Combat: 130%

			Cassidy
			{
				Ultimate Generation - Combat Deadeye: 200%
				Ultimate Generation - Passive Deadeye: 10%
			}

			D.Va
			{
				Self Destruct Knockback Scalar: 200%
				Spawn With Ultimate Ready: Off
			}

			Junkrat
			{
				Concussion Mine Knockback Scalar: 120%
			}

			Mercy
			{
				Health: 85%
				Resurrect Cooldown Time: 60%
			}

			Moira
			{
				Biotic Orb Cooldown Time: 45%
				Fade Cooldown Time: 35%
				Health: 85%
				Spawn With Ultimate Ready: Off
			}

			Orisa
			{
				Health: 50%
			}

			Reinhardt
			{
				Ultimate Generation - Passive Earthshatter: 300%
			}

			Roadhog
			{
				Health: 65%
				Spawn With Ultimate Ready: Off
			}

			Soldier: 76
			{
				Spawn With Ultimate Ready: Off
				Ultimate Duration: 65%
			}

			Widowmaker
			{
				Grappling Hook Cooldown Time: 10%
				Venom Mine Cooldown Time: 5%
			}

			Winston
			{
				Damage Dealt: 140%
				Health: 75%
			}

			Wrecking Ball
			{
				Grappling Claw Knockback Scalar: 115%
				Health: 65%
			}

			Zarya
			{
				Health: 55%
			}
		}
	}
}

variables
{
	global:
		0: IsRoundActive
		1: IsRoundStart
		2: TextIDS
		3: Powerup_HPPercent
		4: Powerup_DamagePercent
		5: Powerup_PlayersNumAdvantage
		6: MapBoundry_Vertical
		7: MapBoundry_Horizontal
		8: TimeLimit1v1_Countdown
		9: HUDTipColor
		11: Temp
		23: DBGMsg
		24: DBGBotShooting
		25: DBG

	player:
		0: TextIDS
		1: Hammond_GrappleIsOn
		2: Hammond_IciclePos
}

rule("NOTES/TODO'S")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"INFO: The general Ultimate Generation setting multiplies with specific ones (combat/passive). So when you set passive generation to say 200% and general to 200%, your passive will result in 400%."
		Abort;
		"INFO: Avoid default IsGameInProgress as it turns true only several seconds after round actually starts, prefer Global.IsRoundActive."
		Abort;
		"NOTE: Avoid default IsBetweenRounds as it turns false far too early in the start of the round, sometimes even when player is still indicated to have previous round hero."
		Abort;
		"NOTE: \"Temp\" variable (array of) is used for short lived, disposable varibales."
		Abort;
		"XXX: Some functionality such as hp/damage ballancer or 1v1 time limit might occasionally take into account dummy players created by faux abilities. It is not a noticable issue as of yet."
		Abort;
		"BUG: Ultimates wont start generating for a few seconds in the start of match (need \"Is Game In Progress = True\"). This is an issue for characters that don't start with ult ready."
		Abort;
	}
}

rule("Base: Set global variables and show UI tips")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Auto-ballancing variables. Bumps percentage of HP / damage of each player in smaller team."
		Global.Powerup_HPPercent = 20;
		Global.Powerup_DamagePercent = 30;
		"Map boundaries"
		Global.MapBoundry_Vertical = 25;
		Global.MapBoundry_Horizontal = 45;
		"Misc"
		Disable Built-In Game Mode Announcer;
		Global.TimeLimit1v1_Countdown = -1;
		"Tips"
		Create HUD Text(Players On Hero(Hero(Ana), All Teams), Null, Custom String("TIP: You can self-ultimate"), Null, Left, 1, Null,
			Global.HUDTipColor, Null, Visible To and Color, Default Visibility);
		Create HUD Text(Players On Hero(Hero(Junkrat), All Teams), Null, Custom String("TIP: You can ultimate mid-air"), Null, Left, 1,
			Null, Global.HUDTipColor, Null, Visible To and Color, Default Visibility);
		"HUD spacing"
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Custom String(""), Custom String("")), Custom String(
			"{0} {1}", Custom String(""), Custom String("")), Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Custom String(""), Custom String("")), Custom String(
			"{0} {1}", Custom String(""), Custom String("")), Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Custom String(""), Custom String("")), Custom String(
			"{0} {1}", Custom String(""), Custom String("")), Top, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Custom String(""), Custom String("")), Custom String(
			"{0} {1}", Custom String(""), Custom String("")), Top, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("Base: Skip hero select, initiate round start variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		"Allow time to select in debug mode"
		If(Global.DBG == True);
			Set Match Time(5);
			Wait(5, Ignore Condition);
		End;
		"This skips the selection"
		Set Match Time(0);
		"Allow time for game to select hero for player and initiate round"
		Wait(0.250, Ignore Condition);
		Global.IsRoundActive = True;
		Global.IsRoundStart = True;
		Log To Inspector(Custom String(">>> round #{0} start", Match Round));
		Wait(0.250, Ignore Condition);
		Global.IsRoundStart = False;
	}
}

rule("Base: Round end (cleanup)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Team Score(Team 1) > 0 || Team Score(Team 2) > 0 || Is Between Rounds) == True;
	}

	actions
	{
		Log To Inspector(Custom String(">>> round end"));
		Set Team Score(All Teams, 0);
		Global.IsRoundActive = False;
		Global.Powerup_PlayersNumAdvantage = 0;
		Global.TimeLimit1v1_Countdown = -1;
		Stop All Healing Modifications;
		Stop All Damage Modifications;
		Stop All Damage Over Time(All Players(All Teams));
		Stop Forcing Player Position(All Players(All Teams));
		Set Damage Dealt(All Players(All Teams), 100);
		Set Max Health(All Players(All Teams), 100);
		Allow Button(All Players(All Teams), Button(Secondary Fire));
		Destroy HUD Text(Global.TextIDS[0]);
		Set Knockback Dealt(All Players(All Teams), 100);
	}
}

rule("Base: Round end (cleanup - per player)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.IsRoundActive != True;
	}

	actions
	{
		"Destroy bots in slots 4-11, these are used for temporary dummy bots for faux abilities etc."
		If(Is Dummy Bot(Event Player) && Slot Of(Event Player) > 3);
			Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
		End;
		Destroy HUD Text(Event Player.TextIDS[0]);
	}
}

rule("Base: Prevent heroes flying away")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Y Component Of(Position Of(Event Player)) > Global.MapBoundry_Vertical || Absolute Value(X Component Of(Position Of(
			Event Player))) > Global.MapBoundry_Horizontal || Absolute Value(Z Component Of(Position Of(Event Player)))
			> Global.MapBoundry_Horizontal) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("Don't stray too far"));
		If(Y Component Of(Position Of(Event Player)) > Global.MapBoundry_Vertical);
			Set Status(Event Player, Null, Frozen, 2);
		Else;
			"If character lives long enough for the freeze to expire during horizontal escape - they can fly away anyway so we just kill them (with longer freeze) to prevent it."
			Set Status(Event Player, Null, Frozen, 5);
		End;
	}
}

rule("Base: Ballance team sizes at round end")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DBG != True;
		Global.IsRoundActive != True;
		Absolute Value(Number Of Players(Team 1) - Number Of Players(Team 2)) > 1;
	}

	actions
	{
		"Wait before all utility bots are destroyed"
		Wait Until(!Count Of(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element))), 1);
		"NOTE: in case of teams being 1:4 players it will take 2 rounds to ballance"
		Global.Temp[0] = Number Of Players(Team 1) - Number Of Players(Team 2);
		If(Global.Temp[0] > 1);
			Log To Inspector(Custom String("moving \"{0}\" to Team 2", Last Of(All Players(Team 1))));
			Move Player to Team(Last Of(All Players(Team 1)), Team 2, -1);
		Else If(Global.Temp[0] < -1);
			Log To Inspector(Custom String("moving \"{0}\" to Team 1", Last Of(All Players(Team 2))));
			Move Player to Team(Last Of(All Players(Team 2)), Team 1, -1);
		End;
	}
}

rule("Base: Prevent overly long 1v1s (if players waiting)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DBG != True;
		Global.IsRoundActive == True;
		Number Of Living Players(Team 1) == 1;
		Number Of Living Players(Team 2) == 1;
		Number Of Players(All Teams) > 2;
		"Ignore if round is already near end"
		Match Time > 40;
	}

	actions
	{
		Abort If(Global.TimeLimit1v1_Countdown > -1);
		Log To Inspector(Custom String("1v1 time limit countdown start"));
		"This line is just to remove default countdown UI"
		Set Match Time(120);
		"XXX: this is quite unsightly"
		Wait Until(!Global.IsRoundActive || Count Of(Filtered Array(All Living Players(All Teams), !Is Dummy Bot(Current Array Element)))
			> 2, 10);
		If(Count Of(Filtered Array(All Living Players(All Teams), !Is Dummy Bot(Current Array Element))) > 2);
			Log To Inspector(Custom String("1v1 time limit prevented"));
			Abort;
		End;
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Round ends in: {0} seconds", Global.TimeLimit1v1_Countdown),
			Top, 1, Color(White), Color(White), Global.TimeLimit1v1_Countdown > 5 ? Color(White) : Custom Color(250, 55, 65, 255),
			String and Color, Default Visibility);
		Global.TextIDS[0] = Last Text ID;
		For Global Variable(TimeLimit1v1_Countdown, 30, 0, -1);
			Wait Until(!Global.IsRoundActive, 1);
		End;
		Destroy HUD Text(Global.TextIDS[0]);
		Abort If(!Global.IsRoundActive);
		Log To Inspector(Custom String("1v1 time limit reached"));
		Declare Round Draw;
	}
}

rule("Base: Prevent premature game completion")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DBG != True;
		Is Waiting For Players != True;
		(Number Of Players(Team 1) == 0 || Number Of Players(Team 2) == 0) == True;
	}

	actions
	{
		Global.Temp[1] = Last Of(All Players(All Teams));
		If(Number Of Players(All Teams) == 1);
			"Skip victory screen on default victory when all but one players leave"
			Restart Match;
		Else;
			Log To Inspector(Custom String("immediately moving \"{0}\" to {1}", Global.Temp[1], Opposite Team Of(Team Of(Global.Temp[1]))));
			"XXX: it might make sense to also end match by declaring draw but that somehow doesn't trigger IsBetweenRounds (in this case) and no cleanup happens which is an issue"
			Move Player to Team(Global.Temp[1], Opposite Team Of(Team Of(Global.Temp[1])), -1);
		End;
	}
}

rule("Misc: HUD tip highlight")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IsRoundActive == True;
	}

	actions
	{
		Global.HUDTipColor = Color(Orange);
		Wait(2, Ignore Condition);
		Global.HUDTipColor = Color(White);
	}
}

rule("HP/Damage Balance: Powerup players belonging to smaller team")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.IsRoundStart == True;
		Number Of Players(Team Of(Event Player)) < Number Of Players(Opposite Team Of(Team Of(Event Player)));
	}

	actions
	{
		Abort If(Global.Powerup_PlayersNumAdvantage > 0);
		Global.Powerup_PlayersNumAdvantage = Number Of Players(Opposite Team Of(Team Of(Event Player))) - Number Of Players(Team Of(
			Event Player));
		Set Max Health(All Players(Team Of(Event Player)), 100 + Global.Powerup_HPPercent * Global.Powerup_PlayersNumAdvantage);
		Set Damage Dealt(All Players(Team Of(Event Player)), 100 + Global.Powerup_DamagePercent * Global.Powerup_PlayersNumAdvantage);
		Log To Inspector(Custom String("powerup x{1} {0} (evt:{2})", Team Of(Event Player), Global.Powerup_PlayersNumAdvantage,
			Event Player));
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("{0} powered up!", Team Of(Event Player)));
	}
}

rule("Hero: Ana (self ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Dummy Bot(Event Player) == False;
		(Is Alive(Event Player) && Entity Exists(Event Player) && Global.IsRoundActive) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Create Dummy Bot(Hero(Ana), Team Of(Event Player), 10, Vector(0, 0, 0), Vector(0, 0, 0));
		Set Invisible(Players In Slot(10, Team Of(Event Player)), All);
		Start Forcing Dummy Bot Name(Players In Slot(10, Team Of(Event Player)), Custom String("Ana Apparition"));
		Start Forcing Player Position(Players In Slot(10, Team Of(Event Player)), Position Of(Event Player) + Vector(0, 5, 1), False);
		Start Facing(Players In Slot(10, Team Of(Event Player)), Direction Towards(Players In Slot(10, Team Of(Event Player)),
			Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.400, Ignore Condition);
		Press Button(Players In Slot(10, Team Of(Event Player)), Button(Ultimate));
		Wait Until((Is Alive(Event Player) && Entity Exists(Event Player) && Global.IsRoundActive) != True, 9);
		Destroy Dummy Bot(Team Of(Event Player), 10);
	}
}

rule("Hero: Hammond (icicle grapple - icicle spawning)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.Hammond_GrappleIsOn == False;
		(Is Alive(Event Player) && Entity Exists(Event Player) && Global.IsRoundActive) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		"Position of where a fake icicle should be created (what hammond is looking at)."
		Event Player.Hammond_IciclePos = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 13, All Players(All Teams), Event Player, True);
		"Prevent underground icicle"
		If(Y Component Of(Event Player.Hammond_IciclePos) < 0.700);
			Event Player.Hammond_IciclePos = Vector(X Component Of(Event Player.Hammond_IciclePos), 0.700, Z Component Of(
				Event Player.Hammond_IciclePos));
		End;
		Create Dummy Bot(Hero(Mei), Team Of(Event Player), 11, Event Player.Hammond_IciclePos - Vector(0, 0.300, 0), Vector(0, 0, 0));
		Start Forcing Dummy Bot Name(Players In Slot(11, Team Of(Event Player)), Custom String("Icicle"));
		Start Forcing Player Position(Players In Slot(11, Team Of(Event Player)), Position Of(Players In Slot(11, Team Of(Event Player))),
			True);
		Set Invisible(Players In Slot(11, Team Of(Event Player)), All);
		Wait(0.065, Ignore Condition);
		Press Button(Players In Slot(11, Team Of(Event Player)), Button(Ability 1));
		Wait(1, Ignore Condition);
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 3);
		Destroy Dummy Bot(Team Of(Event Player), 11);
	}
}

rule("Hero: Hammond (icicle grapple - when grapple disabled)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		(Absolute Value(X Component Of(Position Of(Event Player))) > 19.700 || Absolute Value(Z Component Of(Position Of(Event Player)))
			> 19.700 || Entity Exists(Players In Slot(11, Team Of(Event Player)))) == False;
		Global.IsRoundActive == True;
	}

	actions
	{
		Event Player.Hammond_GrappleIsOn = False;
		Disallow Button(Event Player, Button(Secondary Fire));
		Destroy HUD Text(Event Player.TextIDS[0]);
		Create HUD Text(Event Player, Null, Custom String("TIP: Try to grapple air / sky"), Null, Left, 1, Null, Global.HUDTipColor, Null,
			Visible To and Color, Default Visibility);
		Event Player.TextIDS[0] = Last Text ID;
	}
}

rule("Hero: Hammond (icicle grapple - when grapple enabled)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		(Absolute Value(X Component Of(Position Of(Event Player))) > 19.700 || Absolute Value(Z Component Of(Position Of(Event Player)))
			> 19.700 || Entity Exists(Players In Slot(11, Team Of(Event Player)))) == True;
		Global.IsRoundActive == True;
	}

	actions
	{
		"If icicle was created"
		If(Entity Exists(Players In Slot(11, Team Of(Event Player))));
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.Hammond_IciclePos), 10000, To World,
				Direction and Turn Rate);
			"Allow some time for focus to snap onto icicle"
			Wait(0.170, Ignore Condition);
			Event Player.Hammond_GrappleIsOn = True;
			Allow Button(Event Player, Button(Secondary Fire));
			"Resetting ability triggers grapple to fire again when held"
			Set Secondary Fire Enabled(Event Player, False);
			Set Secondary Fire Enabled(Event Player, True);
			Stop Facing(Event Player);
		"If simply outside of island range"
		Else;
			Event Player.Hammond_GrappleIsOn = True;
			Allow Button(Event Player, Button(Secondary Fire));
		End;
		Destroy HUD Text(Event Player.TextIDS[0]);
		Create HUD Text(Event Player, Null, Custom String("TIP: Try to grapple air / sky (NOT NOW)"), Null, Left, 1, Null, Custom Color(
			255, 255, 255, 60), Null, Visible To and String, Default Visibility);
		Event Player.TextIDS[0] = Last Text ID;
	}
}

rule("Hero: Hammond (piledriver buff)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Crouch)) > 0;
		(Is Alive(Event Player) && Entity Exists(Event Player) && Global.IsRoundActive) == True;
	}

	actions
	{
		Start Damage Modification(All Players(All Teams), Event Player, 200, Receivers Damagers and Damage Percent);
		Set Knockback Dealt(Event Player, 115);
		Wait Until(Vertical Speed Of(Event Player) == 0, 2);
		Wait(0.250, Ignore Condition);
		Stop All Damage Modifications;
		Set Knockback Dealt(Event Player, 100);
	}
}

rule("Hero: Junkrat (mid-air ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		(Is Alive(Event Player) && Entity Exists(Event Player) && Global.IsRoundActive) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Position Of(Event Player), False);
		Create Dummy Bot(Hero(Mei), Team Of(Event Player), 8, Position Of(Event Player) - Vector(0, 2.600, 0), Vector(0, 0, 0));
		Start Forcing Dummy Bot Name(Players In Slot(8, Team Of(Event Player)), Custom String("Icicle"));
		Set Invisible(Players In Slot(8, Team Of(Event Player)), All);
		Start Forcing Player Position(Players In Slot(8, Team Of(Event Player)), Position Of(Players In Slot(8, Team Of(Event Player))),
			False);
		Wait(0.065, Ignore Condition);
		Press Button(Players In Slot(8, Team Of(Event Player)), Button(Ability 1));
		Stop Forcing Player Position(Event Player);
		Wait Until(!Is In Air(Event Player), 1);
		Press Button(Event Player, Button(Ultimate));
		Destroy Dummy Bot(Team Of(Event Player), 8);
	}
}

rule("Hero: Soldier 76 (start with some ult%)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Global.IsRoundActive == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 85);
	}
}

rule("Hero: D.Va (start with an ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		(Is Alive(Event Player) && Entity Exists(Event Player) && Global.IsRoundActive) == True;
	}

	actions
	{
		"NOTE: We are setting ult to 100% in the rules instead of settings because the setting makes her gain 100% ult every time she re-mechs."
		Set Ultimate Charge(Event Player, 100);
	}
}

disabled rule("DBG: Toggle")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.DBG = True;
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0}", Global.DBGMsg), Right, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
	}
}

rule("DBG: Persistent dummy bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DBG == True;
		Match Round == 1;
		Event Player == Host Player;
	}

	actions
	{
		Create Dummy Bot(Hero(Zenyatta), Opposite Team Of(Team Of(Host Player)), 0, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Zenyatta), Opposite Team Of(Team Of(Host Player)), 1, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Zenyatta), Opposite Team Of(Team Of(Host Player)), 2, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Zenyatta), Opposite Team Of(Team Of(Host Player)), 3, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Zarya), Team Of(Host Player), 1, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Zarya), Team Of(Host Player), 2, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Zarya), Team Of(Host Player), 3, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("DBG: Persistent bot shooting toggler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player == Host Player;
		Global.DBG == True;
	}

	actions
	{
		Global.DBGBotShooting = !Global.DBGBotShooting;
	}
}

rule("DBG: Persistent bot aim and shoot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Slot Of(Event Player) == 0;
		Is Dummy Bot(Event Player) == True;
		Global.IsRoundActive == True;
		Global.DBGBotShooting == True;
	}

	actions
	{
		Start Facing(Event Player, Direction From Angles(90, 3), 100, To Player, None);
		While(True);
			Wait(2, Ignore Condition);
			If(Global.DBGBotShooting);
				Press Button(Event Player, Button(Primary Fire));
			End;
		End;
	}
}

rule("DBG: Melee actions (for dev drafts)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Melee)) == True;
		Global.DBG == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Melee DBG"));
	}
}