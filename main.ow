settings
{
	main
	{
		Description: "All new OW2 heroes.\n- Hammond can grapple air.\n- Ana can self-ult.\n- Ballance changes.\n- Anti-winston-trolling (and such).\n\nAll changes and info at:\nhttps://github.com/domuspopus/overwatch-4v4-all-heroes"
		Mode Name: "4v4 All Heroes (John edit v1.2)"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
		Swap Teams After Match: No
		Team Balancing: After A Game
	}

	modes
	{
		Elimination
		{
			enabled maps
			{
				Workshop Island Night 0
			}
		}

		General
		{
			Allow Hero Switching: Off
			Capture Objective Tiebreaker: Off
			Game Mode Start: Immediately
			Respawn As Random Hero: On
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 25%
			Spawn With Ultimate Ready: On
			Ultimate Generation: 200%
			Ultimate Generation - Combat: 130%

			Cassidy
			{
				Ultimate Generation - Combat Deadeye: 200%
				Ultimate Generation - Passive Deadeye: 10%
			}

			D.Va
			{
				Self Destruct Knockback Scalar: 200%
				Ultimate Generation - Combat Self-Destruct: 0%
				Ultimate Generation - Passive Self-Destruct: 0%
				Ultimate Generation Self-Destruct: 10%
			}

			Junkrat
			{
				Concussion Mine Knockback Scalar: 120%
			}

			Mercy
			{
				Health: 85%
				Resurrect Cooldown Time: 60%
			}

			Moira
			{
				Biotic Orb Cooldown Time: 45%
				Fade Cooldown Time: 35%
				Health: 85%
				Spawn With Ultimate Ready: Off
			}

			Orisa
			{
				Health: 70%
			}

			Reinhardt
			{
				Ultimate Generation - Passive Earthshatter: 300%
			}

			Roadhog
			{
				Health: 75%
				Spawn With Ultimate Ready: Off
			}

			Soldier: 76
			{
				Spawn With Ultimate Ready: Off
				Ultimate Duration: 65%
			}

			Winston
			{
				Damage Dealt: 140%
				Health: 75%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 35%
				Grappling Claw Cooldown Time: 35%
				Grappling Claw Knockback Scalar: 115%
				Health: 65%
				Piledriver Cooldown Time: 35%
			}

			Zarya
			{
				Health: 50%
			}
		}
	}
}

variables
{
	global:
		0: TeamSizesDifference
		1: PowerupHPPercent
		2: PowerupDamagePercent
		3: PowerupMessageSent
		4: MapBoundryVertical
		5: MapBoundryHorizontal
		10: IteratorIndex1
		11: Temp
		24: DBGBotShooting
		25: DBG
}

rule("NOTES/TODO'S")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"TODO: ultimate generation values need to be simplified and re-thought, replace general \"Ultimate Generation:\" entry in some way. I cant make sense of it."
		Abort;
	}
}

rule("Base: Set global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Auto-ballancing variables. Bumps percentage of HP / damage of each player in smaller team."
		Global.PowerupHPPercent = 20;
		Global.PowerupDamagePercent = 20;
		"Map boundaries"
		Global.MapBoundryVertical = 25;
		Global.MapBoundryHorizontal = 45;
		"Misc"
		Disable Built-In Game Mode Announcer;
		"HUD spacing"
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Custom String(""), Custom String("")), Custom String(
			"{0} {1}", Custom String(""), Custom String("")), Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		"Tips"
		Create HUD Text(Players On Hero(Hero(Ana), All Teams), Null, Custom String("TIP: You can self-ultimate"), Null, Left, 3, Null,
			Color(White), Null, Visible To and String, Default Visibility);
		Create HUD Text(Players On Hero(Hero(Wrecking Ball), All Teams), Null, Custom String("TIP: Try to grapple air/sky"), Null, Left, 3,
			Null, Color(White), Null, Visible To and String, Default Visibility);
		Create HUD Text(Players On Hero(Hero(Junkrat), All Teams), Null, Custom String("TIP: You can ultimate mid-air"), Null, Left, 3,
			Null, Color(White), Null, Visible To and String, Default Visibility);
	}
}

rule("Base: Skip hero select")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		"Allow time to select in debug mode"
		If(Global.DBG == True);
			Wait(5, Ignore Condition);
		End;
		Set Match Time(0);
	}
}

rule("Base: Round end triggers and cleanup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Team Score(Team 1) > 0 || Team Score(Team 2) > 0) == True;
	}

	actions
	{
		Set Team Score(All Teams, 0);
		For Global Variable(IteratorIndex1, 4, 12, 1);
			Destroy Dummy Bot(Team 1, Global.IteratorIndex1);
			Destroy Dummy Bot(Team 2, Global.IteratorIndex1);
		End;
		Global.PowerupMessageSent = False;
		Stop All Healing Modifications;
		Stop All Damage Over Time(All Players(All Teams));
		Stop Forcing Player Position(All Players(All Teams));
	}
}

rule("Base: Prevent heroes flying away")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Y Component Of(Position Of(Event Player)) > Global.MapBoundryVertical || Absolute Value(X Component Of(Position Of(Event Player)))
			> Global.MapBoundryHorizontal || Absolute Value(Z Component Of(Position Of(Event Player))) > Global.MapBoundryHorizontal)
			== True;
	}

	actions
	{
		If(Y Component Of(Position Of(Event Player)) > Global.MapBoundryVertical);
			Set Status(Event Player, Null, Frozen, 2);
		Else;
			"If character lives long enough for the freeze to expire during horizontal escape - they can fly away anyway so we just kill them (with longer freeze) to prevent it."
			Set Status(Event Player, Null, Frozen, 5);
		End;
	}
}

rule("Base: Ballance team sizes at round end")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress != True;
	}

	actions
	{
		"NOTE: in case of teams being 1:4 players it will take 2 rounds to ballance"
		Global.Temp = Number Of Players(Team 1) - Number Of Players(Team 2);
		If(Global.Temp > 1);
			Move Player to Team(Players In Slot(0, Team 1), Team 2, -1);
		Else If(Global.Temp < -1);
			Move Player to Team(Players In Slot(0, Team 2), Team 1, -1);
		End;
	}
}

rule("Base: Prevent overly long 1v1s")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Number Of Living Players(Team 1) == 1;
		Number Of Living Players(Team 2) == 1;
		Global.DBG != True;
	}

	actions
	{
		If(Number Of Dead Players(All Teams) > 0);
			Wait(40, Abort When False);
		Else;
			Wait(120, Abort When False);
		End;
		Small Message(All Players(All Teams), Custom String("1v1 time limit. Applying damage over time."));
		Start Healing Modification(All Players(All Teams), All Players(All Teams), 0, None);
		Start Damage Over Time(All Players(All Teams), Null, 9999, 10);
	}
}

rule("HP/Damage Balance: Powerup players belonging to smaller team")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"NOTE: this rule might occasionally count dummy players created by faux abilities, although unlikely given it takes place at the very start of round"
		Is Game In Progress == True;
		Number Of Players(Team Of(Event Player)) < Number Of Players(Opposite Team Of(Team Of(Event Player)));
	}

	actions
	{
		Global.TeamSizesDifference = Number Of Players(Opposite Team Of(Team Of(Event Player))) - Number Of Players(Team Of(Event Player));
		Set Max Health(Event Player, 100 + Global.PowerupHPPercent * Global.TeamSizesDifference);
		Set Damage Dealt(Event Player, 100 + Global.PowerupDamagePercent * Global.TeamSizesDifference);
		If(!Global.PowerupMessageSent);
			Global.PowerupMessageSent = True;
			Small Message(All Players(All Teams), Custom String("{0} powered up!", Team Of(Event Player)));
	}
}

rule("Hero: Ana (self ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Dummy Bot(Event Player) == False;
		(Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Create Dummy Bot(Hero(Ana), Team Of(Event Player), 10, Vector(0, 0, 0), Vector(0, 0, 0));
		Set Invisible(Players In Slot(10, Team Of(Event Player)), All);
		Start Forcing Dummy Bot Name(Players In Slot(10, Team Of(Event Player)), Custom String("Ana Apparition"));
		Start Forcing Player Position(Players In Slot(10, Team Of(Event Player)), Position Of(Event Player) + Vector(0, 5, 1), False);
		Start Facing(Players In Slot(10, Team Of(Event Player)), Direction Towards(Players In Slot(10, Team Of(Event Player)),
			Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.400, Ignore Condition);
		Press Button(Players In Slot(10, Team Of(Event Player)), Button(Ultimate));
		Wait Until((Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds) != True, 9);
		Destroy Dummy Bot(Team Of(Event Player), 10);
	}
}

rule("Hero: Hammond (icicle grapple)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		"XXX: if eventually this ability proves to be too unreliable, consider creating icicle on \"crouch\" instead of on the fly"
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Y Component Of(Position Of(Event Player)) > -0.500;
		(Is Alive(Event Player) && Entity Exists(Event Player)) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		"Position of where a fake icicle should be created (what hammond is looking at)."
		Global.Temp = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player)
			* 13, All Players(All Teams), Event Player, True);
		Abort If(Distance Between(Eye Position(Event Player), Global.Temp) < 13);
		Create Dummy Bot(Hero(Mei), Team Of(Event Player), 11, Global.Temp - Vector(0, 0.300, 0), Vector(0, 0, 0));
		Start Forcing Dummy Bot Name(Players In Slot(11, Team Of(Event Player)), Custom String("Icicle"));
		Start Forcing Player Position(Players In Slot(11, Team Of(Event Player)), Position Of(Players In Slot(11, Team Of(Event Player))),
			True);
		Set Invisible(Players In Slot(11, Team Of(Event Player)), All);
		Wait(0.065, Ignore Condition);
		Press Button(Players In Slot(11, Team Of(Event Player)), Button(Ability 1));
		Wait Until((Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds && Is Button Held(Event Player, Button(
			Secondary Fire))) != True, 5);
		Destroy Dummy Bot(Team Of(Event Player), 11);
	}
}

rule("Hero: Junkrat (mid-air ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		(Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Position Of(Event Player), False);
		Create Dummy Bot(Hero(Mei), Team Of(Event Player), 8, Position Of(Event Player) - Vector(0, 2.600, 0), Vector(0, 0, 0));
		Start Forcing Dummy Bot Name(Players In Slot(8, Team Of(Event Player)), Custom String("Icicle"));
		Set Invisible(Players In Slot(8, Team Of(Event Player)), All);
		Start Forcing Player Position(Players In Slot(8, Team Of(Event Player)), Position Of(Players In Slot(8, Team Of(Event Player))),
			False);
		Wait(0.065, Ignore Condition);
		Press Button(Players In Slot(8, Team Of(Event Player)), Button(Ability 1));
		Stop Forcing Player Position(Event Player);
		Wait Until(!Is In Air(Event Player), 1);
		Press Button(Event Player, Button(Ultimate));
		Destroy Dummy Bot(Team Of(Event Player), 8);
	}
}

rule("Hero: Soldier 76 (start with some ult%)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Between Rounds != True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 65);
	}
}

disabled rule("DBG: Toggle")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.DBG = True;
		"Copy-pastable snippet below this entry"
		Abort;
		If(Global.DBG == True);
			Small Message(All Players(All Teams), Custom String(""));
		End;
	}
}

rule("DBG: Persistent dummy bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Global.DBG == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Zenyatta), Opposite Team Of(Team Of(Event Player)), 0, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Ana), Opposite Team Of(Team Of(Event Player)), 1, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("DBG: Persistent bot shooting toggler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player == Host Player;
		Global.DBG == True;
	}

	actions
	{
		Global.DBGBotShooting = !Global.DBGBotShooting;
	}
}

rule("DBG: Persistent bot aim and shoot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Slot Of(Event Player) == 0;
		Is Dummy Bot(Event Player) == True;
		Is Game In Progress == True;
		Global.DBG == True;
	}

	actions
	{
		Start Facing(Event Player, Direction From Angles(90, 3), 100, To Player, None);
		While(True);
			Wait(2, Ignore Condition);
			If(Global.DBGBotShooting);
				Press Button(Event Player, Button(Primary Fire));
			End;
		End;
	}
}

rule("DBG: Melee actions (for dev drafts)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Melee)) == True;
		Global.DBG == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Melee DBG"));
	}
}