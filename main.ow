settings
{
	main
	{
		Description: "All new OW2 heroes. All changes and info at: https://github.com/domuspopus/overwatch-4v4-all-heroes"
		Mode Name: "4v4 All Heroes (John edit v1.1)"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
		Swap Teams After Match: No
		Team Balancing: After A Game
	}

	modes
	{
		Elimination
		{
			enabled maps
			{
				Workshop Island Night 0
			}
		}

		General
		{
			Allow Hero Switching: Off
			Capture Objective Tiebreaker: Off
			Game Mode Start: Immediately
			Respawn As Random Hero: On
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 25%
			Spawn With Ultimate Ready: On
			Ultimate Generation: 280%
			Ultimate Generation - Combat: 130%

			Cassidy
			{
				Ultimate Generation - Combat Deadeye: 200%
				Ultimate Generation - Passive Deadeye: 10%
			}

			D.Va
			{
				Self Destruct Knockback Scalar: 200%
				Ultimate Generation - Combat Self-Destruct: 0%
				Ultimate Generation - Passive Self-Destruct: 0%
				Ultimate Generation Self-Destruct: 10%
			}

			Moira
			{
				Spawn With Ultimate Ready: Off
			}

			Orisa
			{
				Health: 70%
			}

			Reinhardt
			{
				Ultimate Generation - Passive Earthshatter: 300%
			}

			Roadhog
			{
				Health: 75%
				Spawn With Ultimate Ready: Off
			}

			Winston
			{
				Damage Dealt: 140%
				Health: 75%
			}

			Wrecking Ball
			{
				Adaptive Shield Cooldown Time: 35%
				Grappling Claw Cooldown Time: 35%
				Health: 65%
				Piledriver Cooldown Time: 35%
			}

			Zarya
			{
				Health: 50%
			}
		}
	}
}

variables
{
	global:
		0: DBGBotShooting
		1: DamageAddTeam2
		2: MaxHPAdd
		3: DamageAdd
		4: HasGameBegan
		5: RoundTrigger
		6: HPTriggerTeam1
		7: HPTriggerTeam2
		8: MaxHPOfTeam2
		9: MaxHPOfTeam1
		10: DamageAddTeam1
		25: DBG
}

rule("NOTES/TODO'S")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"TODO: ultimate generation values need to be simplified and re-thought, replace Ultimate Generation: 280% entry in some way. I cant make sense of it."
		Abort;
	}
}

rule("Base: Set global variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.MaxHPAdd = 20;
		Global.DamageAdd = 50;
		Disable Built-In Game Mode Announcer;
	}
}

rule("Base: Set round start trigger variable for the first time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.HasGameBegan != True;
	}

	actions
	{
		Global.HasGameBegan = True;
		Global.RoundTrigger = True;
	}
}

rule("Base: Skip hero select")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		"Allow time to select in debug mode"
		If(Global.DBG == True);
			Wait(5, Ignore Condition);
		End;
		Set Match Time(0);
	}
}

rule("Base: Round end trigger and cleanup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Team Score(Team 1) > 0 || Team Score(Team 2) > 0) == True;
	}

	actions
	{
		Set Team Score(All Teams, 0);
		Global.RoundTrigger = True;
		For Global Variable(N, 4, 12, 1);
			Destroy Dummy Bot(Team 1, Global.N);
			Destroy Dummy Bot(Team 2, Global.N);
		End;
	}
}

rule("Base: Prevent heroes flying away")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Y Component Of(Position Of(Event Player)) > 25 || Absolute Value(X Component Of(Position Of(Event Player)))
			> 40 || Absolute Value(Z Component Of(Position Of(Event Player))) > 40) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Hacked, 2);
	}
}

rule("Auto balance: Set hp and damage difference general")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"TODO FIXME: count number of NON-DUMMY players, not ALL players"
		Global.RoundTrigger == True;
		Is Between Rounds == False;
	}

	actions
	{
		"0 or player difference"
		Global.MaxHPOfTeam2 = Global.MaxHPAdd * Max(Number Of Players(Team 1) - Number Of Players(Team 2), 0);
		"0 or player difference"
		Global.MaxHPOfTeam1 = Global.MaxHPAdd * Max(Number Of Players(Team 2) - Number Of Players(Team 1), 0);
		"0 or player difference"
		Global.DamageAddTeam2 = Global.DamageAdd * Max(Number Of Players(Team 1) - Number Of Players(Team 2), 0);
		"0 or player difference"
		Global.DamageAddTeam1 = Global.DamageAdd * Max(Number Of Players(Team 2) - Number Of Players(Team 1), 0);
		Global.RoundTrigger = False;
		Global.HPTriggerTeam1 = True;
		Global.HPTriggerTeam2 = True;
		Disallow Button(All Players(All Teams), Button(Primary Fire));
		Wait(0.300, Ignore Condition);
		Allow Button(All Players(All Teams), Button(Primary Fire));
		If(Global.DBG == True);
			Small Message(All Players(All Teams), Custom String("ballancing applied..."));
		End;
	}
}

rule("Auto balance: Set hp and damage of team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.HPTriggerTeam1 == True;
		Is Between Rounds == False;
	}

	actions
	{
		Global.HPTriggerTeam1 = False;
		Set Max Health(Event Player, 100 + Global.MaxHPOfTeam1);
		Set Damage Dealt(Event Player, 100 + Global.DamageAddTeam1);
		If(Global.MaxHPOfTeam1 > 0);
			Wait(0.250, Ignore Condition);
			Small Message(All Players(All Teams), Custom String("Team 1 Powered up!"));
	}
}

rule("Auto balance: Set hp and damage of team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.HPTriggerTeam2 == True;
		Is Between Rounds == False;
	}

	actions
	{
		Global.HPTriggerTeam2 = False;
		Set Max Health(Event Player, 100 + Global.MaxHPOfTeam2);
		Set Damage Dealt(Event Player, 100 + Global.DamageAddTeam2);
		If(Global.MaxHPOfTeam2 > 0);
			Wait(0.250, Ignore Condition);
			Small Message(All Players(All Teams), Custom String("Team 2 Powered up!"));
	}
}

rule("Hero: Ana (self ult)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Dummy Bot(Event Player) == False;
		(Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Create Dummy Bot(Hero(Ana), Team Of(Event Player), 10, Vector(0, 0, 0), Vector(0, 0, 0));
		Set Invisible(Players In Slot(10, Team Of(Event Player)), All);
		Start Forcing Dummy Bot Name(Players In Slot(10, Team Of(Event Player)), Custom String("Ana Apparition"));
		Start Forcing Player Position(Players In Slot(10, Team Of(Event Player)), Position Of(Event Player) + Vector(0, 5, 1), False);
		Start Facing(Players In Slot(10, Team Of(Event Player)), Direction Towards(Players In Slot(10, Team Of(Event Player)),
			Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.400, Ignore Condition);
		Press Button(Players In Slot(10, Team Of(Event Player)), Button(Ultimate));
		Wait(10, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), 10);
	}
}

rule("Hero: Hammond (icicle grapple)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		"XXX: if eventually this ability proves to be too unreliable, consider creating icicle on \"crouch\" instead of on the fly"
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
		Y Component Of(Position Of(Event Player)) > -0.500;
		(Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds) == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player, Knocked Down) || Has Status(Event Player, Frozen) || Has Status(
			Event Player, Stunned)) == False;
	}

	actions
	{
		Create Dummy Bot(Hero(Mei), Team Of(Event Player), 11, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 14, All Players(All Teams), Event Player, True), Vector(0, 0, 0));
		Start Forcing Dummy Bot Name(Players In Slot(11, Team Of(Event Player)), Custom String("Icicle"));
		Start Forcing Player Position(Players In Slot(11, Team Of(Event Player)), Position Of(Players In Slot(11, Team Of(Event Player))),
			True);
		Set Invisible(Players In Slot(11, Team Of(Event Player)), All);
		Wait(0.065, Ignore Condition);
		Press Button(Players In Slot(11, Team Of(Event Player)), Button(Ability 1));
	}
}

rule("Hero: Hammond (icicle grapple - cleanup)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		(Is Alive(Event Player) && Entity Exists(Event Player) && !Is Between Rounds && Is Button Held(Event Player, Button(
			Secondary Fire))) != True;
	}

	actions
	{
		Destroy Dummy Bot(Team Of(Event Player), 11);
	}
}

disabled rule("DBG: Toggle")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.DBG = True;
		"Copy-pastable snippet below this entry"
		Abort;
		If(Global.DBG == True);
			Small Message(All Players(All Teams), Custom String(""));
		End;
	}
}

rule("DBG: Persistent dummy bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Global.DBG == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Zenyatta), Opposite Team Of(Team Of(Event Player)), 0, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create Dummy Bot(Hero(Ana), Opposite Team Of(Team Of(Event Player)), 1, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("DBG: Persistent bot shooting toggler")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player == Host Player;
		Global.DBG == True;
	}

	actions
	{
		Global.DBGBotShooting = !Global.DBGBotShooting;
	}
}

rule("DBG: Persistent bot aim and shoot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Slot Of(Event Player) == 0;
		Is Dummy Bot(Event Player) == True;
		Is Game In Progress == True;
		Global.DBG == True;
	}

	actions
	{
		Start Facing(Event Player, Direction From Angles(90, 3), 100, To Player, None);
		While(0 == 0);
			Wait(2, Ignore Condition);
			If(Global.DBGBotShooting);
				Press Button(Event Player, Button(Primary Fire));
			End;
		End;
	}
}

rule("DBG: Melee actions (for dev drafts)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Melee)) == True;
		Global.DBG == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Melee DBG"));
	}
}